import Head from 'next/head'
import Axios from '../utils/axios'
import { Inter } from 'next/font/google'
import { GetServerSideProps } from 'next'
import {
  Query,
  QueryClient,
  QueryClientProvider,
  useMutation,
  useQueries,
  useQuery
} from '@tanstack/react-query'
import { useState } from 'react'
import { trpc } from '@/utils/trpc'
import { AxiosError, AxiosResponse } from 'axios'
import { fetchSubmitUser, fetchUserData } from '@/service/Users'
import { PrismaClient } from '@prisma/client'
import { UserData } from '@/utils/types'

export const queryClient = new QueryClient()

const inter = Inter({ subsets: ['latin'] })

interface Props {
  existingUsers: UserData[]
}

export default function Home({ existingUsers }: Props) {
  const [userData, setUserData] = useState<UserData>({
    name: '',
    id: '',
    balance: 0
  })
  const [users, setUsers] = useState<UserData[]>(existingUsers)

  const results = useQueries({
    queries: users.map<Partial<Query>>((user) => ({
      queryKey: ['userBalance', user.id],
      queryFn: () => fetchUserData(user.id),
      onSuccess: (res: AxiosResponse) => {},
      onError: (err: AxiosError) => {
        console.log(err)
      },
      staleTime: 30000,
      retry: false
    }))
  })

  const { mutate: submitUser } = useMutation(
    (data: UserData) => fetchSubmitUser(data),
    {
      onSuccess: (res) => {
        const userInformation: UserData = res.data.user

        setUsers((prev) => [...prev, userInformation])

        queryClient.setQueryData(
          ['userBalance', userInformation.id],
          (state: any) => {
            // add data to the current state for cache purposes
            return state
          }
        )
      }
    }
  )

  const { mutate: deleteUser } = useMutation(
    (data: UserData) => fetchSubmitUser(data),
    {
      onSuccess: (res) => {
        const userInformation: UserData = res.data.user

        setUsers((prev) => [...prev, userInformation])

        queryClient.setQueryData(
          ['userBalance', userInformation.id],
          (state: any) => {
            // add data to the current state for cache purposes
            return state
          }
        )
      }
    }
  )

  const addUser = () => {
    submitUser(userData)
    setUserData({ id: '', name: '', balance: 0 })
  }

  const handleDeleteUser = (id: string) => {
    const newUsers = users.filter((el) => el.id !== id)
    // deleteUser(id)
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={` ${inter.className}`}>
        <div className='container mx-auto mt-3'>
          <div className='max-w-[600px] mx-auto'>
            <div className='rounded bg-gray-500 p-3 text-white'>
              <p className='text-lg'>Balance sheet</p>
            </div>
            <section className='mt-3 bg-gray-200 rounded p-3'>
              <p className='text-lg'>Add an user</p>
              <div>
                <label className='block mb-2  font-medium '>User Id</label>
                <select
                  onChange={(ev) =>
                    setUserData((prev) => ({ ...prev, id: ev.target.value }))
                  }
                  defaultValue={'Select a Number'}
                  id='countries'
                  className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5'>
                  <option value='1'>1</option>
                  <option value='2'>2</option>
                  <option value='3'>3</option>
                  <option value='4'>4</option>
                  <option value='5'>5</option>
                  <option value='6'>6</option>
                  <option value='7'>7</option>
                  <option value='8'>8</option>
                  <option value='9'>9</option>
                  <option value='10'>10</option>
                  <option value='11'>11</option>
                  <option value='12'>12</option>
                  <option value='13'>13</option>
                  <option value='14'>14</option>
                </select>
                <div className='mt-3'>
                  <p>User Name (Optional)</p>
                  <input
                    className='bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2'
                    type='text'
                    value={userData.name}
                    onChange={(ev) =>
                      setUserData((prev) => ({
                        ...prev,
                        name: ev.target.value
                      }))
                    }
                  />
                </div>
                <div className='mt-3 ml-auto flex'>
                  <button
                    onClick={addUser}
                    className='ml-auto group relative h-12 w-48 overflow-hidden rounded-lg bg-white text-lg shadow'>
                    <div className='absolute inset-0 w-3 bg-gray-400 transition-all duration-[250ms] ease-out group-hover:w-full'></div>
                    <span className='relative text-black group-hover:text-white'>
                      Submit
                    </span>
                  </button>
                </div>
              </div>
            </section>
            <section>
              <div className='rounded bg-gray-500 p-3 text-white mt-5'>
                <p>Added User Balances</p>
              </div>
              <div>
                {users.map((el, key) => (
                  <div
                    key={`user-${key}-${el.id}`}
                    className='bg-gray-300 p-3 flex rounded mt-1'>
                    <p className='w-[50px]'>ID:{el.id}</p>
                    {el.name && (
                      <div className='w-[150px]'>Name: {el.name}</div>
                    )}
                    <div className='w-[50px]'>Balance: {el.balance}</div>
                    <button
                      title='Delete user'
                      className='text-white text-xl rounded-full px-2 h-[27px] bg-red-500 ml-auto'
                      onClick={() => handleDeleteUser(el.id)}>
                      -
                    </button>
                  </div>
                ))}
              </div>
            </section>
          </div>
        </div>
      </main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async () => {
  const prisma = new PrismaClient()
  const users = await prisma.user.findMany()
  return {
    props: { existingUsers: users }
  }
}
